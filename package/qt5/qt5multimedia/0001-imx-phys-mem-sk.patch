diff -uprN qtmultimedia-everywhere-src-5.11.3/src/gsttools/gsttools.pro qtmultimedia-everywhere-src-5.11.3-sk/src/gsttools/gsttools.pro
--- qtmultimedia-everywhere-src-5.11.3/src/gsttools/gsttools.pro	2018-11-20 14:57:04.000000000 +0300
+++ qtmultimedia-everywhere-src-5.11.3-sk/src/gsttools/gsttools.pro	2019-03-11 19:40:43.159405142 +0300
@@ -15,6 +15,9 @@ QMAKE_USE += gstreamer
 qtConfig(resourcepolicy): \
     QMAKE_USE += libresourceqt5
 
+DEFINES += GST_IMX_EXTENSIONS
+CONFIG += link_pkgconfig
+PKGCONFIG += gstimxcommon
 # Header files must go inside source directory of a module
 # to be installed by syncqt.
 INCLUDEPATH += ../multimedia/gsttools_headers/
diff -uprN qtmultimedia-everywhere-src-5.11.3/src/gsttools/qgstvideobuffer.cpp qtmultimedia-everywhere-src-5.11.3-sk/src/gsttools/qgstvideobuffer.cpp
--- qtmultimedia-everywhere-src-5.11.3/src/gsttools/qgstvideobuffer.cpp	2018-11-20 14:57:04.000000000 +0300
+++ qtmultimedia-everywhere-src-5.11.3-sk/src/gsttools/qgstvideobuffer.cpp	2019-03-11 19:38:41.215410242 +0300
@@ -39,6 +39,10 @@
 
 #include "qgstvideobuffer_p.h"
 
+#ifdef GST_IMX_EXTENSIONS
+#include <gstreamer-1.0/gst/allocators/imx/phys_mem_meta.h>
+#endif
+
 QT_BEGIN_NAMESPACE
 
 #if GST_CHECK_VERSION(1,0,0)
@@ -54,6 +58,13 @@ QGstVideoBuffer::QGstVideoBuffer(GstBuff
     , m_mode(NotMapped)
 {
     gst_buffer_ref(m_buffer);
+
+#ifdef GST_IMX_EXTENSIONS
+    GstImxPhysMemMeta *meta = GST_IMX_PHYS_MEM_META_GET(buffer);
+    if (meta && meta->phys_addr != 0) {
+        setMetaData("imx_phys_addr", (quint32)meta->phys_addr);
+    }
+#endif
 }
 
 #if GST_CHECK_VERSION(1,0,0)
@@ -74,6 +85,13 @@ QGstVideoBuffer::QGstVideoBuffer(GstBuff
     , m_handle(handle)
 {
     gst_buffer_ref(m_buffer);
+
+#ifdef GST_IMX_EXTENSIONS
+    GstImxPhysMemMeta *meta = GST_IMX_PHYS_MEM_META_GET(buffer);
+    if (meta && meta->phys_addr != 0) {
+        setMetaData("imx_phys_addr", (quint32)meta->phys_addr);
+    }
+#endif
 }
 
 QGstVideoBuffer::~QGstVideoBuffer()
diff -uprN qtmultimedia-everywhere-src-5.11.3/src/multimedia/video/qabstractvideobuffer.cpp qtmultimedia-everywhere-src-5.11.3-sk/src/multimedia/video/qabstractvideobuffer.cpp
--- qtmultimedia-everywhere-src-5.11.3/src/multimedia/video/qabstractvideobuffer.cpp	2018-11-20 14:57:04.000000000 +0300
+++ qtmultimedia-everywhere-src-5.11.3-sk/src/multimedia/video/qabstractvideobuffer.cpp	2019-03-11 19:38:41.215410242 +0300
@@ -269,6 +269,24 @@ QVariant QAbstractVideoBuffer::handle()
     return QVariant();
 }
 
+QVariantMap QAbstractVideoBuffer::availableMetaData() const
+{
+    return m_metadata;
+}
+
+QVariant QAbstractVideoBuffer::metaData(const QString &key) const
+{
+    return m_metadata.value(key);
+}
+
+void QAbstractVideoBuffer::setMetaData(const QString &key, const QVariant &value)
+{
+    if (!value.isNull())
+        m_metadata.insert(key, value);
+    else
+        m_metadata.remove(key);
+}
+
 
 int QAbstractPlanarVideoBufferPrivate::map(
         QAbstractVideoBuffer::MapMode mode, int *numBytes, int bytesPerLine[4], uchar *data[4])
diff -uprN qtmultimedia-everywhere-src-5.11.3/src/multimedia/video/qabstractvideobuffer.h qtmultimedia-everywhere-src-5.11.3-sk/src/multimedia/video/qabstractvideobuffer.h
--- qtmultimedia-everywhere-src-5.11.3/src/multimedia/video/qabstractvideobuffer.h	2018-11-20 14:57:04.000000000 +0300
+++ qtmultimedia-everywhere-src-5.11.3-sk/src/multimedia/video/qabstractvideobuffer.h	2019-03-11 19:38:41.215410242 +0300
@@ -45,6 +45,7 @@
 
 
 #include <QtCore/qmetatype.h>
+#include <QVariantMap>
 
 QT_BEGIN_NAMESPACE
 
@@ -89,11 +90,16 @@ public:
 
     virtual QVariant handle() const;
 
+    QVariantMap availableMetaData() const;
+    QVariant metaData(const QString &key) const;
+    void setMetaData(const QString &key, const QVariant &value);
+
 protected:
     QAbstractVideoBuffer(QAbstractVideoBufferPrivate &dd, HandleType type);
 
     QAbstractVideoBufferPrivate *d_ptr;  // For expansion, not used currently
     HandleType m_type;
+    QVariantMap m_metadata;
 
 private:
     Q_DECLARE_PRIVATE(QAbstractVideoBuffer)
diff -uprN qtmultimedia-everywhere-src-5.11.3/src/multimedia/video/qvideoframe.cpp qtmultimedia-everywhere-src-5.11.3-sk/src/multimedia/video/qvideoframe.cpp
--- qtmultimedia-everywhere-src-5.11.3/src/multimedia/video/qvideoframe.cpp	2018-11-20 14:57:04.000000000 +0300
+++ qtmultimedia-everywhere-src-5.11.3-sk/src/multimedia/video/qvideoframe.cpp	2019-03-11 19:38:41.215410242 +0300
@@ -317,6 +317,12 @@ QVideoFrame::QVideoFrame(
     : d(new QVideoFramePrivate(size, format))
 {
     d->buffer = buffer;
+    if (buffer) {
+        for (auto it = buffer->availableMetaData().cbegin(),
+             end = buffer->availableMetaData().cend(); it != end; ++it) {
+            d->metadata.insert(it.key(), it.value());
+        }
+    }
 }
 
 /*!
diff -uprN qtmultimedia-everywhere-src-5.11.3/src/plugins/videonode/imx6/qsgvivantevideomaterial.cpp qtmultimedia-everywhere-src-5.11.3-sk/src/plugins/videonode/imx6/qsgvivantevideomaterial.cpp
--- qtmultimedia-everywhere-src-5.11.3/src/plugins/videonode/imx6/qsgvivantevideomaterial.cpp	2018-11-20 14:57:04.000000000 +0300
+++ qtmultimedia-everywhere-src-5.11.3-sk/src/plugins/videonode/imx6/qsgvivantevideomaterial.cpp	2019-03-11 19:38:41.219410242 +0300
@@ -213,16 +213,22 @@ GLuint QSGVivanteVideoMaterial::vivanteM
                 const uchar *constBits = vF.bits();
                 void *bits = (void*)constBits;
 
+                GLuint physical = ~0U;
+                QVariant p = vF.metaData("imx_phys_addr");
+                if (p.isValid()) {
+                    physical = p.toUInt();
+                }
 #ifdef QT_VIVANTE_VIDEO_DEBUG
                 qDebug() << Q_FUNC_INFO
                          << "new texture, texId: " << tmpTexId
                          << "; constBits: " << constBits
+                         << "; physical: " << physical
                          << "; actual/full width: " << vF.width() << "/" << fullWidth
                          << "; actual/full height: " << vF.height() << "/" << fullHeight
                          << "; UV scale: U " << uScale << " V " << vScale;
 #endif
 
-                GLuint physical = ~0U;
+
 
                 glBindTexture(GL_TEXTURE_2D, tmpTexId);
                 glTexDirectVIVMap_LOCAL(GL_TEXTURE_2D,
